knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr); library(purrr); library(magrittr)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr); library(purrr); library(magrittr)
jsonlite::fromJSON("https://quality.data.gov.tw/dq_download_json.php?nid=6020&md5_url=ceedea8b44b88a1bf46b48ab84b8742c", simplifyDataFrame = F) -> cpiByIncome
str(cpiByIncome)
# names_element1
names(cpiByIncome)
# names_element1
names(cpiByIncome[[1]])
# names_element1
names_element1 <- names(cpiByIncome[[1]])
names_element1
pick_item <- map(cpiByIncome,~.x$item)
# items
pick_item <- map(cpiByIncome,~.x$item)
items <- unlist(pick_item)
# items
list_items <- map(cpiByIncome, ~ .x$Item)
items <- unlist(list_items)
items %>% factor() -> items
items
names(cpiByIncome[[1]]) -> names_element1
# names_element1
names(cpiByIncome[[1]]) -> names_element1
names_element1
list_items <- map(cpiByIncome, ~ .x$Item)
items <- unlist(list_items)
items %>% factor() -> items
items
pick_item <- map(cpiByIncome,~.x$item)
items <- unlist(pick_item)
items <- factor(items)
items
list_items <- map(cpiByIncome, ~ .x$Item)
items <- unlist(list_items)
items %>% factor() -> items
items
names_element1 <- names(cpiByIncome[[1]])
names_element1
pick_item <- map(cpiByIncome,~.x$Item)
items <- unlist(pick_item)
items <- factor(items)
items
knitr::opts_chunk$set(echo = TRUE)
# p=1.2的需求量
p=1.2
qd <- 10-5*p # 小心是5*p, 不能寫5p
# p=1.3的需求量
p=1.3
qd <- 10-5*p
# p=1.4的需求量
p=1.4
qd <- 10-5*p
demand <- # 創造一個物件叫demand
function(p){ # 定義這個物件為函數
q_d <- 10-5*p # 小心是5*p, 不能寫5p
}
p
qd
demand
# p=1.2的需求量
demand(1.2)
# p=1.3的需求量
demand(1.3)
# p=1.4的需求量
demand(1.4)
# p=1.2的需求量
demand(1.2)
# p=1.3的需求量
demand(1.3)
# p=1.4的需求量
demand(1.4)
# p=1.2的需求量
demand(1.2)
# p=1.3的需求量
demand(1.3)
# p=1.4的需求量
demand(1.4)
demand_return <-
function(p){
q_d <- 10-5*p
return(q_d)
}
# 印在螢幕，但Global Environment並不會有q_d
demand_return(1.2)
.Last.value
# 要長久存在Global Environment要指定物件名稱（不要求與q_d同名）
demand_return(1.2) -> q_d1.2
demand(1.2) # 相當於4
demand(1.2) -> q_d1.2 # 相當於
4 -> q_d1.2
demand_return(1.2) # 相當於4
rm(qd)
q_d <- 5
demand_return(p=1.2)
print(q_d)
dateInput <- today()
library(lubridate)
dateInput <- today()
locationInput <- "新北市"
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
# 找出符合地點的天氣資訊：weatherAtLocation
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location # 可挑出locationInput的「要/不要」向量
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
# 在weatherAtLocation找出符合時間的天氣資訊
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
askSilly_weather <- function(locationInput){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
askSilly_weather("臺中市",today())
library(lubridate)
askSilly_weather("臺中市",today())
askSilly_weather("臺中市")#,today())
askSilly_weather("花蓮縣")#,today())
class(demand_return)
# 查詢函數formals arguments要求
formals(askSilly_weather)
# 查詢函數主體
body(askSilly_weather)
learning_topics <-
list(
subject="函數",
date=lubridate::ymd("2020-06-03"),
functionsCreated=list(
demand=demand_return # 等號右邊是呼叫demand_return的定義值，也就是function(...){...}值定義本身。
)
)
learning_topics$functionsCreated$demand(1.2)
typeof(demand)
knitr::opts_chunk$set(echo = TRUE)
typeof(demand_return())
# p=1.2的需求量
p=1.2
qd <- 10-5*p # 小心是5*p, 不能寫5p
# p=1.3的需求量
p=1.3
qd <- 10-5*p
# p=1.4的需求量
p=1.4
qd <- 10-5*p
demand <- # 創造一個物件叫demand
function(p){ # 定義這個物件為函數
q_d <- 10-5*p # 小心是5*p, 不能寫5p
}
p
qd
demand
# p=1.2的需求量
demand(1.2)
# p=1.3的需求量
demand(1.3)
# p=1.4的需求量
demand(1.4)
demand_return <-
function(p){
q_d <- 10-5*p
return(q_d)
}
# 印在螢幕，但Global Environment並不會有q_d
demand_return(1.2)
.Last.value
# 要長久存在Global Environment要指定物件名稱（不要求與q_d同名）
demand_return(1.2) -> q_d1.2
demand_return(1.2) # 相當於4
demand(1.2) -> q_d1.2 # 相當於
4 -> q_d1.2
q_d <- 5
demand_return(p=1.2)
print(q_d)
library(lubridate)
dateInput <- today()
locationInput <- "新北市"
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
# 找出符合地點的天氣資訊：weatherAtLocation
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location # 可挑出locationInput的「要/不要」向量
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
# 在weatherAtLocation找出符合時間的天氣資訊
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
askSilly_weather <- function(locationInput){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
askSilly_weather("臺中市")#,today())
askSilly_weather("花蓮縣")#,today())
class(demand_return)
class(demand_return)
typeof(demand_return)
# 查詢函數formals arguments要求
formals(askSilly_weather)
# 查詢函數主體
body(askSilly_weather)
learning_topics <-
list(
subject="函數",
date=lubridate::ymd("2020-06-03"),
functionsCreated=list(
demand=demand_return # 等號右邊是呼叫demand_return的定義值，也就是function(...){...}值定義本身。
)
)
learning_topics$functionsCreated$demand(1.2)
typeof(demand_return())
typeof(demand_return
typeof(demand_return)
# 查詢函數執行所要求環境
environment(demand)
# 查詢函數執行所要求環境
environment(demand_return)
# 若函數執行需要Global environment已存在某些物件，查詢需要哪些物件
codetools::findGlobals(demand)
# 若函數執行需要Global environment已存在某些物件，查詢需要哪些物件
codetools::findGlobals(demand_return)
intercept <- 10
slope <- -5
myDemand <- function(p){
q_d <- intercept + slope*p
return(q_d)
}
environment(demand)
environment(myDemand)
codetools::findGlobals(demand)
codetools::findGlobals(myDemand)
# myDemand對Global environment的要求多了intercept及slope
codetools::findGlobals(demand_return)
codetools::findGlobals(myDemand)
# myDemand對Global environment的要求多了intercept及slope
# 移除global environment裡的intercept及slope
rm(intercept, slope)
demand_return(1.2) # 維持正常運作
# 移除global environment裡的intercept及slope
rm(intercept, slope)
myDemand(1.2) # 無法運作
intercept <- 10
slope <- -5
myDemand(1.2)
slope <- -1
myDemand(1.2)
intercept <- 5
slope <- -1.2
myDemand(1.2)
myDemand2 <- function(p, intercept=10, slope=-5){
q_d <- intercept + slope*p
return(q_d)
}
environment(myDemand2)
findGlobals(myDemand2) # 不依靠global env裡的intercept/slope
environment(myDemand2)
codetools::findGlobals(myDemand2) # 不依靠global env裡的intercept/slope
myDemand2(1.2)
myDemand2(1.2, slope=-1)
myDemand2(1.2, intercept=5, slope=-1.2)
knitr::opts_chunk$set(echo = TRUE)
# 先執行此行輸入學號
readline(prompt = "請輸入你的學號") -> studentId
