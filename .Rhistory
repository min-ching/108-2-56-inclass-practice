example$name[pick_fromTaipeiMetro]
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
str(transcript100to103)
set_LawBusiness <- c("法學院","商學院")
pick_lawBusiness <- transcript100to103$`學院` %in% set_LawBusiness
levels(factor(transcript100to103[["學院"]]))
levels(factor(transcript100to103[["學院"]]))
unique(transcript100to103)
levels(factor(transcript100to103[["學院"]]))
unique(transcript100to103[["學院"]])
pick_not_fromTaipeiMetro <- ! pick_fromTaipeiMetro
# 或
pick_not_fromTaipeiMetro <- !(example$residence %in% set_TaipeiMetro) # (..) 裡面會先運算完才做外面!的處理
print(example[c("name","residence")])
example$name[pick_fromTaipeiMetro]
example$name[pick_not_fromTaipeiMetro]
x2 <- c(1,NA,10)
y2 <- c(-1,NA,20)
x3 <- c(NA,"小花")
y3 <- c(NA,"小華")
x2
is.na(x2)
print(example[c("name","weight")])
pick_na <- is.na(example$weight)
example$name[pick_na]
0/0
jsonlite::fromJSON("https://www.dropbox.com/s/3uijub7xheib405/list_victimAges_female.json?dl=1", simplifyDataFrame = F) -> list_victimAges_female
list_victimAges_female$數目 <- as.integer(list_victimAges_female$`數目`)
pick_na <- is.na(list_victimAges_female[["數目"]])
total_na <- sum(pick_na)
print(pick_na)
pick_na <- is.na(list_victimAges_female[["數目"]])
total_na <- sum(pick_na)
print(total_na)
pick_loveFood <- example$hobby == "美食"
pick_loveFood <- example$hobby == "美食"
pick_loveFood
install.packages("stringr")
knitr::opts_chunk$set(echo = TRUE)
print(example[c("name","hobby")])
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
print(example[c("name","hobby")])
pick_loveFood <- stringr::str_detect(example$hobby,"美食")
example$name[pick_loveFood]
example[["hobby2"]] <- c("美食", "時尚", "美食", "旅遊")
print(example[c("name", "hobby2")])
pick_loveFood2 <- example$hobby2 == "美食"
example$name[pick_loveFood2]
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8?$format=json") ->
garbageRoutes
#  1 用typeof()函數查詢電腦實質上如何看待garbageRoutes。
typeof(garbageRoutes)
#  2 用class()函數查詢電腦把它能進行的操作運算歸屬於哪一類型。
class(garbageRoutes)
# 由linename元素判斷垃圾車有幾條路線。
factor(garbageRoutes$linename)  -> garbageRoutes$linename
levels(garbageRoutes$linename)
# 由linename創造： 可篩選出下午路線的「要/不要」向量pick_afternoonRoutes。
pick_afternoonRoutes <-
stringr::str_detect(
garbageRoutes$linename,
"下午"
)
# 由linename元素判斷垃圾車有幾條路線。
factor(garbageRoutes$linename)  -> garbageRoutes$linename
levels(garbageRoutes$linename)
# 由linename創造： 可篩選出下午路線的「要/不要」向量pick_afternoonRoutes。
pick_afternoonRoutes <-
stringr::str_detect(
garbageRoutes$linename,
"下午"
)
garbageRoutes$linename[pick_afternoonRoutes]
?str_detect
print(example[c("name","bloodType")])
pick_bloodB <- example$bloodType == "B"
example$name[pick_bloodB]
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
pick_evens <- (sequenceNums %% 2) == 0
sequenceNums[pick_evens]
x <- c(1,5,8)
y <- c(5,8)
# x裡的元素值是不是屬於y集合
x %in% y
print(example[c("name","residence")])
set_TaipeiMetro <- c("Taipei","New Taipei")
pick_fromTaipeiMetro <- example$residence %in% set_TaipeiMetro
example$name[pick_fromTaipeiMetro]
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
str(transcript100to103)
levels(factor(transcript100to103[["學院"]]))
unique(transcript100to103[["學院"]])
set_LawBusiness <- c("法學院","商學院")
pick_lawBusiness <- transcript100to103$`學院` %in% set_LawBusiness
pick_not_fromTaipeiMetro <- ! pick_fromTaipeiMetro
# 或
pick_not_fromTaipeiMetro <- !(example$residence %in% set_TaipeiMetro) # (..) 裡面會先運算完才做外面!的處理
print(example[c("name","residence")])
example$name[pick_fromTaipeiMetro]
example$name[pick_not_fromTaipeiMetro]
x2 <- c(1,NA,10)
y2 <- c(-1,NA,20)
x3 <- c(NA,"小花")
y3 <- c(NA,"小華")
x2
is.na(x2)
print(example[c("name","weight")])
pick_na <- is.na(example$weight)
example$name[pick_na]
0/0
list_victimAges_female$`數目` <- as.integer(list_victimAges_female$`數目`)
pick_na <- is.na(list_victimAges_female[["數目"]])
jsonlite::fromJSON("https://www.dropbox.com/s/3uijub7xheib405/list_victimAges_female.json?dl=1", simplifyDataFrame = F) -> list_victimAges_female
list_victimAges_female$`數目` <- as.integer(list_victimAges_female$`數目`)
pick_na <- is.na(list_victimAges_female[["數目"]])
total_na <- sum(pick_na)
print(total_na)
print(example[c("name","hobby")])
pick_loveFood <- stringr::str_detect(example$hobby,"美食")
example$name[pick_loveFood]
pick_loveFood <- example$hobby == "美食"
pick_loveFood
example[["hobby2"]] <- c("美食", "時尚", "美食", "旅遊")
print(example[c("name", "hobby2")])
pick_loveFood2 <- example$hobby2 == "美食"
example$name[pick_loveFood2]
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8?$format=json") ->
garbageRoutes
#  1 用typeof()函數查詢電腦實質上如何看待garbageRoutes。
typeof(garbageRoutes)
#  2 用class()函數查詢電腦把它能進行的操作運算歸屬於哪一類型。
class(garbageRoutes)
# 由linename元素判斷垃圾車有幾條路線。
factor(garbageRoutes$linename)  -> garbageRoutes$linename
levels(garbageRoutes$linename)
# 由linename創造： 可篩選出下午路線的「要/不要」向量pick_afternoonRoutes。
pick_afternoonRoutes <-
stringr::str_detect(
garbageRoutes$linename,
"下午"
)
garbageRoutes$linename[pick_afternoonRoutes]
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
fruit <- c("apple", "banana", "pear", "pinapple")
stringr::str_detect(fruit, "a")
stringr::str_detect(fruit, "^a")   ## "^a" 以a開頭
stringr::str_detect(fruit, "a$")  ## "a$" 以a結尾
stringr::str_detect(fruit, "b")   ## $=! 相反
stringr::str_detect(fruit, "[aeiou]")
# Also vectorised over pattern
str_detect("aecfg", letters)
fruit <- c("apple", "banana", "pear", "pinapple")
stringr::str_detect(fruit, "a")
stringr::str_detect(fruit, "^a")   ## "^a" 以a開頭
stringr::str_detect(fruit, "a$")  ## "a$" 以a結尾
stringr::str_detect(fruit, "b")   ## $=! 相反
stringr::str_detect(fruit, "[aeiou]")
# Also vectorised over pattern
stringr::str_detect("aecfg", letters)
# Returns TRUE if the pattern do NOT match
str_detect(fruit, "^p", negate = TRUE)
fruit <- c("apple", "banana", "pear", "pinapple")
stringr::str_detect(fruit, "a")
stringr::str_detect(fruit, "^a")   ## "^a" 以a開頭
stringr::str_detect(fruit, "a$")  ## "a$" 以a結尾
stringr::str_detect(fruit, "b")   ## $=! 相反
stringr::str_detect(fruit, "[aeiou]")
# Also vectorised over pattern
stringr::str_detect("aecfg", letters)
# Returns TRUE if the pattern do NOT match
stringr::str_detect(fruit, "^p", negate = TRUE)
CDC_chatbox <- readr::read_csv("http://od.cdc.gov.tw/pr/CDC_chatbox.csv")
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
levels(as.character(badEmployers$law)
# violatedArticles
levels(as.character(badEmployers$law))
# violatedArticles
as.character(badEmployers$law)
# violatedArticles
unique(as.character(badEmployers$law))
# violatedArticles
violatedArticles <- unique(as.character(badEmployers$law))
violatedArticles
table(violatedArticles)
# table_countsByArticle
violatedArticles <- unique(as.character(badEmployers$law))
violatedArticles
table_countsByArticle <- table(violatedArticles)
names(table_countsByArticle)
# table_countsByArticle
violatedArticles <- unique(as.character(badEmployers$law))
violatedArticles
table_countsByArticle <- table(violatedArticles)
names(table_countsByArticle)
table_countsByArticle
table_countsByArticle <- table(violatedArticles)
names(table_countsByArticle)
table_countsByArticle
table_countsByArticle <- table(badEmployers)
table(badEmployers)
table(as.character(badEmployers$law))
#names(table_countsByArticle)
#table_countsByArticle
table_countsByArticle <- table(as.character(badEmployers$law))
names(table_countsByArticle)
table_countsByArticle
table_countsByAricle =="max"
table_countsByArticle <- table(as.character(badEmployers$law))
names(table_countsByArticle)
table_countsByArticle
table_countsByAricle =="max"
max(table_countsByAricle)
max(table_countsByArticle)
# mostViolatedArticle
table(max(table_countsByArticle))
max(table_countsByArticle)
# mostViolatedArticle
mostViolatedArticle <- table_countsByArticle == max(table_countsByArticle)
max(table_countsByArticle)
# mostViolatedArticle
mostViolatedArticle <- table_countsByArticle == max(table_countsByArticle)
names(mostViolatedArticle)
# mostViolatedArticle
mostViolatedArticle <- table_countsByArticle == max(table_countsByArticle)
names(mostViolatedArticle)
as.integer(mostViolatedArticle)
# mostViolatedArticle
mostViolatedArticle <- table_countsByArticle == as.character(   max(table_countsByArticle))
names(mostViolatedArticle)
as.integer(mostViolatedArticle)
# mostViolatedArticle
table_countsByArticle == as.character(   max(table_countsByArticle))
names(mostViolatedArticle)
as.integer(mostViolatedArticle)
# mostViolatedArticle
mostViolatedArticle <- table_countsByAricle >= max(table_countsByArticle)
mostViolatedArticle <- table_countsByArticle >= max(table_countsByArticle)
names(mostViolatedArticle)
as.integer(mostViolatedArticle)
# mostViolatedArticle
max(table_countsByArticle)
names(mostViolatedArticle)
as.integer(mostViolatedArticle)
# mostViolatedArticle
table_countsByArticle <- table(as.character(badEmployers$law))
names(table_countsByArticle)
table_countsByArticle
max(table_countsByArticle)
names(mostViolatedArticle)
as.integer(mostViolatedArticle)
# mostViolatedArticle
as.character( max(table_countsByArticle))
names(mostViolatedArticle)
as.integer(mostViolatedArticle)
# mostViolatedArticle
as.character(max(table_countsByArticle))
names(mostViolatedArticle)
as.integer(mostViolatedArticle)
# mostViolatedArticle
as.integer(max(table_countsByArticle))
# mostViolatedArticle
as.character(max(table_countsByArticle))
# mostViolatedArticle
mostViolatedArticle <- table_countsByArticle >= as.integer(max(table_countsByArticle))
names(mostViolatedArticle)
# mostViolatedArticle
mostViolatedArticle <- table_countsByArticle >= as.character( as.integer(max(table_countsByArticle)))
names(mostViolatedArticle)
# mostViolatedArticle
mostViolatedArticle <- table_countsByArticle >= as.character( as.integer(max(table_countsByArticle)))
mostViolatedArticle
# mostViolatedArticle
mostViolatedArticle <- table_countsByArticle >= as.character( as.integer(max(table_countsByArticle)))
as.integer(mostViolatedArticle)
# mostViolatedArticle
mostViolatedArticle <- table_countsByArticle >= as.character( as.integer(max(table_countsByArticle)))
# mostViolatedArticle
mostViolatedArticle <- table_countsByArticle >= as.character( as.integer(max(table_countsByArticle)))
mostViolatedArticle
# mostViolatedArticle
table_countsByArticle <- table(as.character(badEmployers$law))
names(table_countsByArticle)
table_countsByArticle
mostViolatedArticle <- table_countsByArticle >= as.character( as.integer(max(table_countsByArticle)))
mostViolatedArticle
# mostViolatedArticle
mostViolatedArticle <- table_countsByArticle >=  as.integer(max(table_countsByArticle))
mostViolatedArticle
# mostViolatedArticle
mostViolatedArticle <- table_countsByArticle ==  as.integer(max(table_countsByArticle))
mostViolatedArticle
# mostViolatedArticle
mostViolatedArticle <- table_countsByArticle >=  as.integer(max(table_countsByArticle))
mostViolatedArticle
# mostViolatedArticle
mostViolatedArticle <- table_countsByArticle >=  as.character(max(table_countsByArticle))
mostViolatedArticle
# mostViolatedArticle
mostViolatedArticle <- table_countsByArticle >=  max(table_countsByArticle)
mostViolatedArticle
# mostViolatedArticle
mostViolatedArticle <- table_countsByArticle >=  max(table_countsByArticle)
table_countsByArticle[mostViolatedArticle]
# mostViolatedArticle
mostViolatedArticle <- table_countsByArticle >=  max(table_countsByArticle)
table_countsByArticle[mostViolatedArticle]
names(mostViolatedArticle)
# mostViolatedArticle
mostViolatedArticle  >=  max(table_countsByArticle)
table_countsByArticle[mostViolatedArticle]
names(mostViolatedArticle)
as.integer(mostViolatedArticle)
# mostViolatedArticle
mostViolatedArticle  >=  as.integer(max(table_countsByArticle))
table_countsByArticle[mostViolatedArticle]
names(mostViolatedArticle)
as.integer(mostViolatedArticle)
# mostViolatedArticle
mostViolatedArticle <- table_countsByArticle >=  as.integer(max(table_countsByArticle))
mostViolatedArticle <- table_countsByArticle[mostViolatedArticle]
# mostViolatedArticle
mostViolatedArticle <- table_countsByArticle >=  as.integer(max(table_countsByArticle))
mostViolatedArticle <- table_countsByArticle[mostViolatedArticle]
mostViolatedArticle
# mostViolatedArticle
mostViolatedArticle <- table_countsByArticle >=  as.integer(max(table_countsByArticle))
mostViolatedArticle <- table_countsByArticle[mostViolatedArticle]
names(mostViolatedArticle)
as.integer(mostViolatedArticle)
# mostViolatedArticle
mostViolatedArticle <- table_countsByArticle[mostViolatedArticle] >=  as.integer(max(table_countsByArticle))
names(mostViolatedArticle)
as.integer(mostViolatedArticle)
mostViolatedArticle
mostViolatedArticle <- table_countsByArticle >=  as.integer(max(table_countsByArticle))
mostViolatedArticle <- table_countsByArticle[mostViolatedArticle]
names(mostViolatedArticle)
as.integer(mostViolatedArticle)
mostViolatedArticle
as.character(badEmployers$lawContent)
# mostViolatedArticle_content
as.character(badEmployers$lawContent) == mostViolatedArticle
# mostViolatedArticle_content
as.character(badEmployers$lawContent) <- mostViolatedArticle
badEmployers$lawContent <- mostViolatedArticle
# mostViolatedArticle_content
badEmployers$lawContent <- mostViolatedArticle
badEmployers$lawContent
# mostViolatedArticle_content
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
mostViolatedArticle <- table_countsByArticle >=  as.integer(max(table_countsByArticle))
mostViolatedArticle <- table_countsByArticle[mostViolatedArticle]
names(mostViolatedArticle)
as.integer(mostViolatedArticle)
mostViolatedArticle
badEmployers$lawContent <-names(mostViolatedArticle)
# mostViolatedArticle_content
badEmployers$lawContent <- names(mostViolatedArticle)
badEmployers$lawContent
# mostViolatedArticle_content
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
badEmployers$lawContent
# mostViolatedArticle_content
mostViolatedArticle_content <- table(as.character(badEmployers$lawContent))
# mostViolatedArticle_content
mostViolatedArticle_content <- table(as.character(badEmployers$lawContent))
mostViolatedArticle_content
mostViolatedArticle_content <- table(as.character(badEmployers$lawContent)) >= as.integer(max(badEmployers$lawContent))
mostViolatedArticle_content
mostViolatedArticle_content <- table(as.character(badEmployers$lawContent)) >= as.integer(max(badEmployers$lawContent))
table(as.character(badEmployers$lawContent))[mostViolatedArticle_content]
mostViolatedArticle_content
mostViolatedArticle_content <- table(as.character(badEmployers$lawContent)) == 507
mostViolatedArticle_content
mostViolatedArticle_content <- table(as.character(badEmployers$lawContent)) == 507
table(as.character(badEmployers$lawContent))[mostViolatedArticle_content]
mostViolatedArticle_content
mostViolatedArticle_content <- table(as.character(badEmployers$lawContent)) == 507
mostViolatedArticle_content<-table(as.character(badEmployers$lawContent))[mostViolatedArticle_content]
mostViolatedArticle_content
badEmployers$dt
# popularSentenceMonth
popularSentenceMonth <- as.integer(badEmployers$dt)
popularSentenceMonth
# popularSentenceMonth
popularSentenceMonth <- table(as.integer(badEmployers$dt))
popularSentenceMonth
# popularSentenceMonth
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
popularSentenceMonth <- table(as.character(badEmployers$dt))
popularSentenceMonth
# popularSentenceMonth
popularSentenceMonth <- table(as.character(badEmployers$dt)) >= as.integer(max(table(as.character(badEmployers$dt))))
popularSentenceMonth
# popularSentenceMonth
popularSentenceMonth <- table(as.character(badEmployers$dt)) >= as.integer(max(table(as.character(badEmployers$dt))))
table(as.character(badEmployers$dt))[popularSentenceMonth]
# popularSentenceMonth
read_csv("https://www.dropbox.com/s/xjzg1iuuws7tcha/table.csv?dl=1") -> table
source("https://www.dropbox.com/s/5oy56om4q0857tt/student10.R?dl=1",encoding = "UTF-8")
read_csv("https://www.dropbox.com/s/xjzg1iuuws7tcha/table.csv?dl=1") -> table
source("https://www.dropbox.com/s/5oy56om4q0857tt/student10.R?dl=1",encoding = "UTF-8")
stringr::str_detect(students10$志願,"北大")
# ntpu_namelist
ntpu_namelist <- stringr::str_detect(students10$`志願`,"北大")
# ntpu_namelist
ntpu_namelist <- stringr::str_detect(students10$`志願`,"北大")
students10$`志願`[ntpu_namelist]
# ntpu_namelist
ntpu_namelist <- stringr::str_detect(students10$`志願`,"北大")
students10$`姓名`[ntpu_namelist]
# ntpu_namelist
ntpu_namelist <- stringr::str_detect(students10$`志願`,"北大")
students10$`姓名`[ntpu_namelist]
ntpu_namelist
ntpu_namelist <- students10$`國文` == 12
# ntpu_econtpu_eco
ntpu_namelist <- students10$`國文` == 12
ntpu_namelist
# ntpu_econtpu_eco
ntpu_namelist <- students10$`國文` == 12
students10$`姓名`[ntpu_namelist]
# ntpu_econtpu_eco
ntpu_namelist <- students10$`國文` >= 12
students10$`姓名`[ntpu_namelist]
# ntpu_econtpu_eco
ntpu_namelist <- students10$`國文` >= 12
students10$`姓名`[ntpu_namelist]
c(students10$`數學`)+c(students10$`英文`)
# ntpu_econtpu_eco
ntpu_namelist <- students10$`國文` >= 12
students10$`姓名`[ntpu_namelist]
ntpu_namelist <- c(students10$`數學`)+c(students10$`英文`) >= 26
students10$`姓名`[ntpu_namelist]
# ntpu_econtpu_eco
ntpu_namelist <- students10$`國文` >= 12
ntpu_namelist <- c(students10$`數學`)+c(students10$`英文`) >= 26
ntpu_econtpu_eco <- students10$`姓名`[ntpu_namelist]
ntpu_econtpu_eco
ntpu_namelist <- students10$`國文` >= 12
ntpu_namelist <- c(students10$`數學`)+c(students10$`英文`) >= 26
ntpu_econtpu_eco <- as.character(students10$`姓名`[ntpu_namelist])
ntpu_econtpu_eco
ntpu_econtpu_eco <- stringr::str_detect(students10$`志願`,"經濟")
ntpu_econtpu_eco
# congrats
ntpu_econtpu_eco <- stringr::str_detect(students10$`志願`,"經濟")
students10$`姓名`[ntpu_econtpu_eco]
# congrats
ntpu_namelist <- students10$`國文` >= 12
ntpu_namelist <- c(students10$`數學`)+c(students10$`英文`) >= 26
ntpu_econtpu_eco <- as.character(students10$`姓名`[ntpu_namelist])
ntpu_econtpu_eco
ntpu_econtpu_eco >- stringr::str_detect(students10$`志願`,"經濟")
students10$`姓名`[ntpu_econtpu_eco]
# congrats
ntpu_econtpu_eco <- stringr::str_detect(students10$`志願`,"經濟")
students10$`姓名`[ntpu_econtpu_eco]
# congrats
ntpu_econtpu_eco <- stringr::str_detect(students10$`志願`,"經濟")
ntpu_namelist <- students10$`國文` >= 12
ntpu_namelist <- c(students10$`數學`)+c(students10$`英文`) >= 26
students10$`姓名`[ntpu_econtpu_eco]
# congrats
ntpu_econtpu_eco <- stringr::str_detect(students10$`志願`,"經濟")
ntpu_econtpu_eco<- students10$`國文` >= 12
ntpu_econtpu_eco <- c(students10$`數學`)+c(students10$`英文`) >= 26
students10$`姓名`[ntpu_econtpu_eco]
# congrats
ntpu_econtpu_eco<- students10$`國文` >= 12
ntpu_econtpu_eco <- c(students10$`數學`)+c(students10$`英文`) >= 26
ntpu_econtpu_eco <- stringr::str_detect(students10$`志願`,"經濟")
students10$`姓名`[ntpu_econtpu_eco]
# congrats
ntpu_econtpu_eco <- stringr::str_detect(students10$`志願`,"經濟")
students10$`姓名`[ntpu_econtpu_eco]
ntpu_namelist <- students10$`國文` >= 12
ntpu_namelist <- c(students10$`數學`)+c(students10$`英文`) >= 26
students10$`姓名`[ntpu_econtpu_eco]
# congrats
ntpu_econtpu_eco <- c(stringr::str_detect(students10$`志願`,"經濟"),c(students10$`數學`)+c(students10$`英文`) >= 26,students10$`國文` >= 12)
students10$`姓名`[ntpu_econtpu_eco]
# congrats
ntpu_econtpu_eco <- stringr::str_detect(students10$`志願`,"經濟")
students10$`姓名`[ntpu_econtpu_eco]
# congrats
ntpu_econtpu_eco <- c(stringr::str_detect(students10$`志願`,"經濟"),sum(c(students10$`數學`)+c(students10$`英文`)))
students10$`姓名`[ntpu_econtpu_eco]
# congrats
ntpu_namelist <- students10$`國文` >= 12
ntpu_namelist <- c(students10$`數學`)+c(students10$`英文`) >= 26
ntpu_econtpu_eco <- as.character(students10$`姓名`[ntpu_namelist])
ntpu_econtpu_eco
ntpu_econtpu_eco %in% stringr::str_detect(students10$`志願`,"經濟")
students10$`姓名`[ntpu_econtpu_eco]
# congrats
congrats <- ntpu_econtpu_eco %in% stringr::str_detect(students10$`志願`,"經濟")
students10$`姓名`[congrats]
# congrats
