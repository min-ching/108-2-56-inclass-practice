str(ntpu_eco)
ntpu_eco <- students10$`國文` >= 12
students10$`姓名`[ntpu_eco]
students10[c("志願","國文",c("英文"+"數學"))]
students10[c(students10$`志願`,"國文",c(students10$`英文`+students10$`數學`))]
read_csv("https://www.dropbox.com/s/xjzg1iuuws7tcha/table.csv?dl=1") -> table
source("https://www.dropbox.com/s/5oy56om4q0857tt/student10.R?dl=1",encoding = "UTF-8")
students10[c(students10$`志願`,"國文",c(students10$`英文`+students10$`數學`))]
paste0(
c("恭喜"), c(ntpu_eco),c("同學錄取國立臺北大學經濟系")
)
# congrats
congrats <- paste0(
c("恭喜"), c(ntpu_eco),c("同學錄取國立臺北大學經濟系")
)
congrats
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
congrats <- paste0(
c("恭喜"), c("陳依祈","林溺","蔡玖"),c("同學錄取國立臺北大學經濟系")
)
congrats
ntpu_namelist <- stringr::str_detect(students10$`志願`,"北大經濟")
ntpu_eco<-ntpu_namelist
ntpu_eco
ntpu_namelist <- stringr::str_detect(students10$`志願`,"北大經濟")
ntpu_eco<-ntpu_namelist
ntpu_eco <- students10$`國文` >=12
ntpu_eco
ntpu_namelist <- stringr::str_detect(students10$`志願`,"北大經濟")
ntpu_eco<-ntpu_namelist
ntpu_namelist <- stringr::str_detect(students10$`志願`,"北大經濟")
ntpu_eco<-ntpu_namelist
ntpu_eco
ntpu_namelist <- stringr::str_detect(students10$`志願`,"北大經濟")
ntpu_eco<-ntpu_namelist
students10$`姓名`[ntpu_eco]
ntpu_namelist <- stringr::str_detect(students10$`志願`,"北大經濟")
ntpu_eco<-ntpu_namelist
students10$`姓名`[ntpu_eco]
ntpu_eco <- students10$`國文` >=12
students10$`姓名`[ntpu_eco]
ntpu_namelist <- stringr::str_detect(students10$`志願`,"北大經濟")
ntpu_eco<-ntpu_namelist
str(ntpu_eco)
ntpu_namelist <- stringr::str_detect(students10$`志願`,"北大經濟")
ntpu_eco<-ntpu_namelist
str(ntpu_eco)
ntpu_eco <- students10$`國文` >= 12
ntpu_namelist <- stringr::str_detect(students10$`志願`,"北大經濟")
ntpu_eco<-ntpu_namelist
str(ntpu_eco)
ntpu_eco <- students10$`國文` >= 12
str(ntpu_eco)
a <- stringr::str_detect(students10$`志願`,"北大經濟")
b <- students10$`國文` >=12
b%in%a
ntpu_eco <- stringr::str_detect(students10$`志願`,"北大") & students10$`國文` >=12 & c(students10$`英文`)+c(students10$`數學`) >=26
ntpu_eco
ntpu_eco <- stringr::str_detect(students10$`志願`,"北大") & students10$`國文` >=12 & c(students10$`英文`)+c(students10$`數學`) >=26
students10$`姓名`[ntpu_eco]
ntpu_eco <- stringr::str_detect(students10$`志願`,"北大") & students10$`國文` >=12 & c(students10$`英文`)+c(students10$`數學`) >=26
ntpu_eco <- students10$`姓名`[ntpu_eco]
ntpu_eco
congrats <- paste0(
c("恭喜"), c(ntpu_eco),c("同學錄取國立臺北大學經濟系")
)
congrats
ntpu_namelist <- stringr::str_detect(students10$`志願`,"北大") ntpu_namelist <- students10$`姓名`[ntpu_namelist]
read_csv("https://www.dropbox.com/s/xjzg1iuuws7tcha/table.csv?dl=1") -> table
source("https://www.dropbox.com/s/5oy56om4q0857tt/student10.R?dl=1",encoding = "UTF-8")
students10$`國文` <- factor(c(students10$`國文`)+c(1))
chinese<- students10$`國文`
chinese
ntpu_namelist <- stringr::str_detect(students10$`志願`,"北大") ntpu_namelist <- students10$`姓名`[ntpu_namelist]
ntpu_namelist <- stringr::str_detect(students10$`志願`,"北大") students10$`姓名`[ntpu_namelist]
ntpu_eco <- stringr::str_detect(students10$`志願`,"北大經濟") & students10$`國文` >=12 & c(students10$`英文`)+c(students10$`數學`) >=26
ntpu_eco <- students10$`姓名`[ntpu_eco]
ntpu_eco
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
violatedArticles <- unique(as.character(badEmployers$law))
violatedArticles
table_countsByArticle <- table(as.character(badEmployers$law))
names(table_countsByArticle)
table_countsByArticle
mostViolatedArticle <- table_countsByArticle >=  as.integer(max(table_countsByArticle))
mostViolatedArticle <- table_countsByArticle[mostViolatedArticle]
names(mostViolatedArticle)
as.integer(mostViolatedArticle)
mostViolatedArticle
mostViolatedArticle_content <- table(as.character(badEmployers$lawContent)) == 507
mostViolatedArticle_content<-table(as.character(badEmployers$lawContent))[mostViolatedArticle_content]
mostViolatedArticle_content
popularSentenceMonth <- table(as.character(badEmployers$dt)) >= as.integer(max(table(as.character(badEmployers$dt))))
popularSentenceMonth <- table(as.character(badEmployers$dt))[popularSentenceMonth]
popularSentenceMonth
read_csv("https://www.dropbox.com/s/xjzg1iuuws7tcha/table.csv?dl=1") -> table
source("https://www.dropbox.com/s/5oy56om4q0857tt/student10.R?dl=1",encoding = "UTF-8")
students10$`國文` <- factor(c(students10$`國文`)+c(1))
chinese<- students10$`國文`
chinese
ntpu_namelist <- stringr::str_detect(students10$`志願`,"北大") students10$`姓名`[ntpu_namelist]
ntpu_namtudenelist <- stringr::str_detect(students10$`志願`,"北大")
ntpu_namelist
ntpu_namtudenelist <- stringr::str_detect(students10$`志願`,"北大")
ntpu_namelist
read_csv("https://www.dropbox.com/s/xjzg1iuuws7tcha/table.csv?dl=1") -> table
source("https://www.dropbox.com/s/5oy56om4q0857tt/student10.R?dl=1",encoding = "UTF-8")
ntpu_namtudenelist <- stringr::str_detect(students10$`志願`,"北大")
ntpu_namelist
ntpu_namelist <- stringr::str_detect(students10$`志願`,"北大")
ntpu_namelist
ntpu_namelist <- stringr::str_detect(students10$`志願`,"北大")
ntpu_namelist <-students10$`姓名`[ntpu_namelist]
ntpu_namelist
ntpu_eco <- stringr::str_detect(students10$`志願`,"北大經濟") & students10$`國文` >=12 & c(students10$`英文`)+c(students10$`數學`) >=26
ntpu_eco <- students10$`姓名`[ntpu_eco]
ntpu_eco
congrats <- paste0(
c("恭喜"), c(ntpu_eco),c("同學錄取國立臺北大學經濟系")
)
congrats
knitr::opts_chunk$set(echo = TRUE)
```{r}
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
str(example[c("name","hobby","bloodType")])
example$name[
str(example[c("name","hobby","bloodType")])
example$name[pick_loveFood & pick_bloodB
]
str(example[c("name","hobby","bloodType")])
example$name[pick_loveFood & pick_bloodB
]
str(example)
pick_above170 <- example$height >= 170
pick_bloodB <- example$bloodType == "B"
pick_loveFood <-
stringr::str_detect(example$hobby,"美食")
pick_na <- is.na(example$weight)
pick_after98 <-
example$birthday >= lubridate::ymd("1998-01-01")
set_TaipeiMetro <- c("Taipei","New Taipei")
pick_fromTaipeiMetro <-
example$residence %in% set_TaipeiMetro
str(example[c("name","hobby","bloodType")])
example$name[
pick_loveFood & pick_bloodB
]
example[c("name","birthday","residence")]
example$name[
pick_after98 | !pick_fromTaipeiMetro
]
example$name[
pick_after98 & pick_fromTaipeiMetro & pick_bloodB
]
library(stringr)
library(glue)
install.packages("stringr")
install.packages("glue")
knitr::opts_chunk$set(echo = TRUE)
library(stringr)
library(glue)
str_sub("410873002", 5, 6)
lubridate::ymd(
c("民國108年12月5日","民國98年10月5日")
)
lubridate::ymd(
c(
"民國2019年12月05日",
"馬丁2019的12課05muydifícil",
"助教2019Emily12解說05真棒",
"2019R12課程05すごい",
"R程式2019的12期中考05とても変態"
)
)
str_extract_all(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳list
str_extract(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳vector
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
install.packages("htmlwidgets")
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
str_count(heartSutra,"色") # 計數
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
str_count(heartSutra,"色") # 計數
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
str_count(heartSutra,"色") # 計數
str_view_all(heartSutra,"異色") # 檢視
studentIds <- c("410873029","410773005","410772035","410562123")
# 取出學號中的入學屆為107或108
str_view_all(studentIds,"(107|108)")
str_view_all(studentIds, "107|108") # 可不寫()
# 是否來自107或108學屆
str_detect(studentIds, "107|108")
Ids <- c("A283743192","B829103720","A10920402","C291022384")
str_view_all(Ids, "[AC]")
str_detect(Ids, "[AC]") # 偵測 出現A、C
str_extract(Ids,"[A-Z]") # 取出 A-Z的字元
strip1 <- "[0-9]"
strip2 <- "(櫻桃|777|紅心)" # 字群組合strip因為等下放中間所以用()括起來
strip3 <- "[A-Z]"
myRegexSlotMachine <- paste0(strip1,strip2,strip3)
print(myRegexSlotMachine)
claimA <- "我得到A檸檬99"
claimB <- "我的是7777Z"
claimC <- "我玩了兩次，一次是7蘋果H，另一次是5紅心J"
# 顯示吻合的出象
str_view(
c(claimA,claimB,claimC),
pattern=myRegexSlotMachine
)
# 是否有吻合的出象
str_detect(
c(claimA,claimB,claimC),
pattern=myRegexSlotMachine
)
headline <- "資科系的謝陳官乃飛鳶書院三大名師，其中謝無雙的策略運算，陳大器的數理資科學，及官求敗的運算成本更是打通演算思維任督二脈的三大好課。書院目前有陳一、陳二、陳三四這三名學生。"
# 顯示所有符合規則的
str_view_all(headline, "謝陳官") # 固定字組
str_count(headline,"謝陳官")
str_view_all(headline, "[謝陳官]") # 有1個strip: 出象有3個可能字元
str_count(headline, "[謝陳官]")
str_view_all(headline, "謝無雙|官求敗") # 有1個strip，出象有2個字組
str_count(headline, "謝無雙|官求敗")
str_view_all(headline, "陳[^官]") # 固定字元＋有1個strip： 出象為排官的字元
str_count(headline, "陳[^官]")
addresses <- c(
'臺中市后里區公館里尾社路385號',
'新竹市東區科學園路125號1樓'
)
strip1 <- strip2 <- strip3 <- "[0-9]"
strip4 <- "號"
myRegexSlotMachine <- paste0(strip1,strip2,strip3,strip4)
print(myRegexSlotMachine)
str_extract(addresses,myRegexSlotMachine)
addresses <- c(
'臺中市后里區公館里尾社路385號',
'新竹市東區科學園路125號1樓',
'新竹市北區竹光路99號',
'金門縣金城鎮賢庵里山前33號',
'臺中市南屯區工業區二十四路23號1樓')
myRegexSlotMachine <- "[0-9]+號"
print(myRegexSlotMachine)
str_view_all(addresses,myRegexSlotMachine)
str_extract(addresses,myRegexSlotMachine)
str_view_all(addresses,"[0-9]+") # 樓號也會選到
phrase <- c("唧唧复唧唧")
# 目標是前面的唧唧
target_regex <- "唧唧"
pattern <- glue::glue("^{target_regex}")
print(pattern)
str_view(phrase, pattern)
twDate <-  c("民國108年12月5日","民國98年10月5日")
library(stringr)
# 準備regex:
## 取出：「前有」民國，「後有」年的「數字」「們」
## "(?<={A_regex}){target_regex}(?={B_regex})"
target_regex <- "[0-9]+"
A_regex <- "民國"
B_regex <- "年"
regex_pattern <- glue::glue(
"(?<={A_regex}){target_regex}(?={B_regex})"
)
print(regex_pattern)
## 如果同學已經很熟就可以直接寫
regex_pattern <-
"(?<=民國)[0-9]+(?=年)"
# 取出民國年，計算西元年
year <-
str_extract(
twDate,
regex_pattern)
westernYear <- as.integer(year)+1911
# 替換民國xx年的xx成西元年數字
str_replace(
twDate,
regex_pattern,  # 要換掉的文字
as.character(westernYear) # 要替換的內容
) -> twDate_reformat
print(twDate_reformat)
lubridate::ymd(twDate_reformat)
addresses <- c(
'臺中市后里區公館里尾社路385號',
'新竹市東區科學園路125號1樓'
)
str_extract(addresses,"[0-9]+(?=號)")
str_extract_all(
"我的名字8293叫17380小abce明",
"[\u4E00-\u9FFF]+")
regex_pattern <-
"(?<=康熙)[0-9]+(?=年)"
regex_pattern <-
"(?<=康熙)[0-9]+(?=年)"
year <-
str_extract(
regex_pattern)
date<-"康熙23年5月6日"
regex_pattern <-
"(?<=康熙)[0-9]+(?=年)"
year <-
str_extract(
regex_pattern)
date<-"康熙23年5月6日"
regex_pattern <-
"(?<=康熙)[0-9]+(?=年)"
year <-
str_extract(date,
regex_pattern)
westernYear <- as.integer(year)+1622
date<-"康熙23年5月6日"
regex_pattern <-
"(?<=康熙)[0-9]+(?=年)"
year <-
str_extract(date,
regex_pattern)
westernYear <- as.integer(year)+1622
westernYear
date<-"康熙23年5月6日"
regex_pattern <-
"(?<=康熙)[0-9]+(?=年)"
year <-
str_extract(date,
regex_pattern)
westernYear <- as.integer(year)+1662
westernYear
date<-"康熙23年5月6日"
regex_pattern <-
"(?<=康熙)[0-9]+(?=年)"
year <-
str_extract(date,
regex_pattern)
westernYear <- as.integer(year)+1662
str_replace(
date,
regex_pattern,
as.character(westernYear)
) -> Date_reformat
print(Date_reformat)
date<-"康熙23年5月6日"
regex_pattern <-
"(?<=康熙)[0-9]+(?=年)"
year <-
str_extract(date,
regex_pattern)
westernYear <- as.integer(year)+1662
str_replace(
date,
regex_pattern,
as.character(westernYear)
) -> Date_reformat
print(Date_reformat)
lubridate::ymd(Date_reformat)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄&兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract(twoNames, "段(兄|弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄弟|兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄&兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄&兄弟)(?=年)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄&兄弟)(?=兩)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)(?=兩)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)(?=兩)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄,兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段c(兄|兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段c((兄|兄弟))")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄&兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段兄"|"段兄弟")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段兄"&"段兄弟")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段兄"||"段兄弟")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段兄|段兄弟")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
str(semiGodsSemiDevils)
# context_picked
str(semiGodsSemiDevils)
semiGodsSemiDevils$data
# context_picked
semiGodsSemiDevils$data
# context_picked
str(semiGodsSemiDevils)
semiGodsSemiDevils$data
# context_picked
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
knitr::opts_chunk$set(echo = TRUE)
# 顯示所有符合規則的
str_view_all(headline, "謝陳官") # 固定字組
headline <- "資科系的謝陳官乃飛鳶書院三大名師，其中謝無雙的策略運算，陳大器的數理資科學，及官求敗的運算成本更是打通演算思維任督二脈的三大好課。書院目前有陳一、陳二、陳三四這三名學生。"
# 顯示所有符合規則的
str_view_all(headline, "謝陳官") # 固定字組
str_count(headline,"謝陳官")
str_view_all(headline, "[謝陳官]") # 有1個strip: 出象有3個可能字元
str_count(headline, "[謝陳官]")
str_view_all(headline, "謝無雙|官求敗") # 有1個strip，出象有2個字組
str_count(headline, "謝無雙|官求敗")
str_view_all(headline, "陳[^官]") # 固定字元＋有1個strip： 出象為排官的字元
str_count(headline, "陳[^官]")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_count(twoNames, "段兄|段兄弟")
str_extract_all(twoNames, "段(兄|兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_count(twoNames, "段兄|段兄弟")
str_extract_all(twoNames, "段兄|段兄弟")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_count(twoNames, "段兄|段兄弟")
target_regex <- c("段兄","段兄弟")
str_extract_all(twoNames, "段兄|段兄弟") <- target_regex
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_count(twoNames, "段兄|段兄弟")
target_regex <- c("段兄","段兄弟")
str_extract_all(twoNames, "段兄|段兄弟") <- target_regex
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_count(twoNames, "段兄|段兄弟")
str_extract_all(twoNames, "段兄|段兄弟")  <- c("段兄","段兄弟")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_count(twoNames, "段兄|段兄弟")
str_extract_all(twoNames, "段兄|段兄弟")
str_extract_all(twoNames, "段兄|段兄弟")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_count(twoNames, "段兄|段兄弟")
str_extract_all(twoNames, "段兄"&"段兄弟")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_count(twoNames, "段兄|段兄弟")
str_extract_all(twoNames, "段兄"|"段兄弟")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_count(twoNames, "段兄|段兄弟")
str_extract_all(twoNames, ""段兄"|"段兄弟"")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段兄|段兄弟")
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames
# back_regex
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
twoNames
# back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
str(semiGodsSemiDevils)
# context_picked
str(semiGodsSemiDevils)
semiGodsSemiDevils$data
# context_picked
str(semiGodsSemiDevils)
semiGodsSemiDevils$data[[5]]
str(semiGodsSemiDevils)
semiGodsSemiDevils$data[[2]]
str(semiGodsSemiDevils)
semiGodsSemiDevils[[data.frame]][[section]]
