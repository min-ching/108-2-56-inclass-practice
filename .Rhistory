str_extract(addresses,"[0-9]+(?=號)")
str_extract_all(
"我的名字8293叫17380小abce明",
"[\u4E00-\u9FFF]+")
regex_pattern <-
"(?<=康熙)[0-9]+(?=年)"
regex_pattern <-
"(?<=康熙)[0-9]+(?=年)"
year <-
str_extract(
regex_pattern)
date<-"康熙23年5月6日"
regex_pattern <-
"(?<=康熙)[0-9]+(?=年)"
year <-
str_extract(
regex_pattern)
date<-"康熙23年5月6日"
regex_pattern <-
"(?<=康熙)[0-9]+(?=年)"
year <-
str_extract(date,
regex_pattern)
westernYear <- as.integer(year)+1622
date<-"康熙23年5月6日"
regex_pattern <-
"(?<=康熙)[0-9]+(?=年)"
year <-
str_extract(date,
regex_pattern)
westernYear <- as.integer(year)+1622
westernYear
date<-"康熙23年5月6日"
regex_pattern <-
"(?<=康熙)[0-9]+(?=年)"
year <-
str_extract(date,
regex_pattern)
westernYear <- as.integer(year)+1662
westernYear
date<-"康熙23年5月6日"
regex_pattern <-
"(?<=康熙)[0-9]+(?=年)"
year <-
str_extract(date,
regex_pattern)
westernYear <- as.integer(year)+1662
str_replace(
date,
regex_pattern,
as.character(westernYear)
) -> Date_reformat
print(Date_reformat)
date<-"康熙23年5月6日"
regex_pattern <-
"(?<=康熙)[0-9]+(?=年)"
year <-
str_extract(date,
regex_pattern)
westernYear <- as.integer(year)+1662
str_replace(
date,
regex_pattern,
as.character(westernYear)
) -> Date_reformat
print(Date_reformat)
lubridate::ymd(Date_reformat)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄&兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract(twoNames, "段(兄|弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄弟|兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄&兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄&兄弟)(?=年)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄&兄弟)(?=兩)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)(?=兩)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)(?=兩)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄,兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段c(兄|兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段c((兄|兄弟))")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄&兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段兄"|"段兄弟")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段兄"&"段兄弟")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段兄"||"段兄弟")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段兄|段兄弟")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
str(semiGodsSemiDevils)
# context_picked
str(semiGodsSemiDevils)
semiGodsSemiDevils$data
# context_picked
semiGodsSemiDevils$data
# context_picked
str(semiGodsSemiDevils)
semiGodsSemiDevils$data
# context_picked
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
knitr::opts_chunk$set(echo = TRUE)
# 顯示所有符合規則的
str_view_all(headline, "謝陳官") # 固定字組
headline <- "資科系的謝陳官乃飛鳶書院三大名師，其中謝無雙的策略運算，陳大器的數理資科學，及官求敗的運算成本更是打通演算思維任督二脈的三大好課。書院目前有陳一、陳二、陳三四這三名學生。"
# 顯示所有符合規則的
str_view_all(headline, "謝陳官") # 固定字組
str_count(headline,"謝陳官")
str_view_all(headline, "[謝陳官]") # 有1個strip: 出象有3個可能字元
str_count(headline, "[謝陳官]")
str_view_all(headline, "謝無雙|官求敗") # 有1個strip，出象有2個字組
str_count(headline, "謝無雙|官求敗")
str_view_all(headline, "陳[^官]") # 固定字元＋有1個strip： 出象為排官的字元
str_count(headline, "陳[^官]")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_count(twoNames, "段兄|段兄弟")
str_extract_all(twoNames, "段(兄|兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_count(twoNames, "段兄|段兄弟")
str_extract_all(twoNames, "段兄|段兄弟")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_count(twoNames, "段兄|段兄弟")
target_regex <- c("段兄","段兄弟")
str_extract_all(twoNames, "段兄|段兄弟") <- target_regex
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_count(twoNames, "段兄|段兄弟")
target_regex <- c("段兄","段兄弟")
str_extract_all(twoNames, "段兄|段兄弟") <- target_regex
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_count(twoNames, "段兄|段兄弟")
str_extract_all(twoNames, "段兄|段兄弟")  <- c("段兄","段兄弟")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_count(twoNames, "段兄|段兄弟")
str_extract_all(twoNames, "段兄|段兄弟")
str_extract_all(twoNames, "段兄|段兄弟")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_count(twoNames, "段兄|段兄弟")
str_extract_all(twoNames, "段兄"&"段兄弟")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_count(twoNames, "段兄|段兄弟")
str_extract_all(twoNames, "段兄"|"段兄弟")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_count(twoNames, "段兄|段兄弟")
str_extract_all(twoNames, ""段兄"|"段兄弟"")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段兄|段兄弟")
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames
# back_regex
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
twoNames
# back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
str(semiGodsSemiDevils)
# context_picked
str(semiGodsSemiDevils)
semiGodsSemiDevils$data
# context_picked
str(semiGodsSemiDevils)
semiGodsSemiDevils$data[[5]]
str(semiGodsSemiDevils)
semiGodsSemiDevils$data[[2]]
str(semiGodsSemiDevils)
semiGodsSemiDevils[[data.frame]][[section]]
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
back_regex <- str_extract_all(twoNames, "段兄|段兄弟","弟(?!兄)")
back_regex <- str_extract_all(twoNames, "段兄|段兄弟","弟(?!兄)")
back_regex
back_regex <- str_extract_all(twoNames, "段兄|段兄弟","弟(?!兄)")
back_regex
back_regex <- str_extract_all(twoNames, "段兄|段兄弟","(?<=兄)")
back_regex
back_regex <- str_extract_all(twoNames, "段兄|段兄弟","(?<=弟)")
back_regex
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
str(semiGodsSemiDevils)
# context_picked
target_regex <- "段(兄|兄弟)"
A_regex <- "他"
B_regex <- "，"
#back_regex
target_regex <- "段(兄|兄弟)"
A_regex <- "他"
B_regex <- "，"
regex_pattern <- glue::glue(
"(?<={A_regex}){target_regex}(?={B_regex})"
)
#back_regex
target_regex <- "段(兄|兄弟)"
A_regex <- "他"
B_regex <- "，"
regex_pattern <- glue::glue(
"(?<={A_regex}){target_regex}(?={B_regex})"
)
print(regex_pattern)
#back_regex
target_regex <- "段(兄|兄弟)"
A_regex <- "他"
B_regex <- "，"
regex_pattern <- glue::glue(
"(?<={A_regex}){target_regex}(?={B_regex})"
)
print(regex_pattern)
back_regex <- str_extract_all(twoNames,regex_pattern)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
target_regex <- "段(兄|兄弟)"
A_regex <- "他"
B_regex <- "，"
regex_pattern <- glue::glue(
"(?<={A_regex}){target_regex}(?={B_regex})"
)
print(regex_pattern)
back_regex <- as.character(str_extract_all(twoNames,regex_pattern))
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
target_regex <- "段(兄|兄弟)"
A_regex <- "他"
B_regex <- "，"
regex_pattern <- glue::glue(
"(?<={A_regex}){target_regex}(?={B_regex})"
)
print(regex_pattern)
back_regex <- str_extract_all(twoNames,regex_pattern)
back_regex
target_regex <- "段(兄|兄弟)"
A_regex <- "他"
B_regex <- "，"
back_regex <- glue::glue(
"(?<={A_regex}){target_regex}(?={B_regex})"
)
back_regex
target_regex <- "段(兄|兄弟)"
A_regex <- "他"
B_regex <- "，"
back_regex <- glue::glue(
"(?<={A_regex}){target_regex}(?={B_regex})"
)
back_regex <- str_extract_all(twoNames,back_regex)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
semiGodsSemiDevils
str(semiGodsSemiDevils)
# context_picked
semiGodsSemiDevils
# context_picked
View(semiGodsSemiDevils)
View(semiGodsSemiDevils)
View(semiGodsSemiDevils)
View(semiGodsSemiDevils)
semiGodsSemiDevils
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
str(semiGodsSemiDevils)
semiGodsSemiDevils$data
# context_picked
a <- semiGodsSemiDevils$data
class(a)
a
str(semiGodsSemiDevils)
a <- semiGodsSemiDevils$data
# context_picked
str(semiGodsSemiDevils)
semiGodsSemiDevils[data]
str(semiGodsSemiDevils)
semiGodsSemiDevils$data[section]
str(semiGodsSemiDevils)
semiGodsSemiDevils$data[[1]]
# context_picked
semiGodsSemiDevils$data[[1]]
# context_picked
semiGodsSemiDevils$data[[1]]
semiGodsSemiDevils[[1]]
# context_picked
semiGodsSemiDevils[[5]]
# context_picked
str(semiGodsSemiDevils)
semiGodsSemiDevils[[5]]
# context_picked
knitr::opts_chunk$set(echo = TRUE)
char1 <- c("Wild","Apple","Donald","May","Avocada")
factor1 <- factor(char1)
levels(factor1)
library(stringr)
char2 <- c("蔡英文","習近平","Donald Trump","蔡頭")
factor2 <- factor(char2)
levels(factor2)
sort(
str_sub(char2,1,1)
) #由小排到大
sort(
str_sub(char2,2,2)
)
Sys.getlocale("LC_COLLATE")
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
# 不可排序類別：性別、縣市、是否境外移入
covid19$縣市 <-
factor(covid19$縣市)
covid19$性別 <-
factor(covid19$性別)
covid19$是否為境外移入 <-
factor(
covid19$是否為境外移入
)
# 可排序類別資料：年齡層
covid19$年齡層 <-
factor(
covid19$年齡層,
ordered=TRUE
)
levels(covid19$縣市)
levels(covid19$性別)
levels(covid19$是否為境外移入)
covid19$年齡層
levels(covid19$年齡層)
levels(covid19$性別)
covid19$性別 <- factor(covid19$性別, c("男","女"))
levels(covid19$性別)
covid19$性別 <- factor(covid19$性別, c("男","女"))
levels(covid19$`性別`)
levels(covid19$性別)
covid19$性別 <- factor(covid19$性別, c("男","女"))
levels(covid19$`性別`)
jsonlite::fromJSON(
"https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1"
) -> population
unlist(population) -> population
print(population)
class(population) # 判斷出是named integer vector
names(population) # 元素名稱是台灣各縣市
print(population)
class(population) # 判斷出是named integer vector
names(population) # 元素名稱是台灣各縣市
population[["新北市"]]
levels(covid19$縣市) # 是名稱字串向量
# 由於population元素值有names，可以用`[名稱字串向量]`取出所要的
levels(covid19$縣市) -> levelsInData
population[levelsInData] -> population
population <- sort(population, decreasing=T)
population
newLevels <- names(population)
newLevels
covid19$縣市 <-
factor(
covid19$縣市, levels=newLevels
)
levels(covid19$縣市)
levels(covid19$年齡層)
level_names <- levels(covid19$年齡層)
startingAges <- stringr::str_extract(
level_names,
"^[0-9]+" # regex：開頭的一串數字
)
level_names <- levels(covid19$年齡層)
startingAges <- stringr::str_extract(
level_names,
"^[0-9]+" # regex：開頭的一串數字
)
startingAges
# 要numerical class排的才一定對
startingAges <- as.integer(startingAges)
names(startingAges) <- level_names
# 要numerical class排的才一定對
startingAges <- as.integer(startingAges)
names(startingAges) <- level_names
startingAges
sort(startingAges) -> startingAges
covid19$年齡層 <-
factor(
covid19$年齡層, names(startingAges)
)
levels(covid19$年齡層)
factor1 <- factor(
c("A","A","C","A","D","F","D","D")
)
factor1
levels(factor1) <- c("優","佳","尚可","普")
factor1
levels(factor1)[[1]] <- "Excellent"
levels(factor1)[c(3,4)] <- c("C","D")
factor1
factor1 <- factor(c("新北市","台北市","台中市","彰化市","基隆市","苗栗縣","苗栗縣"))
factor1
factor1 <- factor(c("新北市","台北市","台中市","彰化市","基隆市","苗栗縣","苗栗縣"))
factor1
levels(factor1)
levels(factor1) <- c("中部","北部","北部","中部","北部","中部")
factor1
factor1 <- factor(c("0-4歲","5-9歲","10歲以上","0-4歲","5-9歲","5-9歲","10歲以上"))
factor1
levels(factor1) <- c("0-9歲","10歲以上","0-9歲")
factor1
covid19$地區 <- covid19$縣市
levels(covid19$地區)
currentLevels <- levels(covid19$地區)
# 整併
north_regex <- "宜蘭縣|基隆市|[台臺]北市|新北市|桃園市|新竹市|新竹縣"
middle_regex <- "苗栗縣|[台臺]中市|彰化縣|南投縣|雲林縣"
south_regex <-
"嘉義市|嘉義縣|[台臺]南[縣市]|高雄市|屏東縣|澎湖縣"
east_regex <- "花蓮縣|台東縣"
currentLevels <- str_replace(currentLevels,
north_regex, "北部")
currentLevels <- str_replace(currentLevels,
middle_regex, "中部")
currentLevels <- str_replace(currentLevels,
south_regex, "南部")
newLevels <- str_replace(currentLevels,
east_regex, "東部")
levels(covid19$地區) <- newLevels
covid19$地區
levels(covid19$年齡層)
# 創造10歲間距的所有可能
start <- seq(5, 55, by=10) # 由5到55，每個值差10的數值向量
end <- seq(14, 64, by=10)
middleLevels <-
rep(
paste0(start,"-",end),
each=2) # 每個新間距要2個
newLevels <- c("4", middleLevels, "65+", "65+")
levels(covid19$年齡層) <- newLevels
covid19$年齡層
factor2 <-
factor(c("好","好","普通","普通", "好"))
levels(factor2)
factor2[[6]] <- "差"
factor2 # 元素6變NA
factor2 <-
factor(c("好","好","普通","普通", "好"))
levels(factor2)
# 先擴大levels
levels(factor2) <- c(levels(factor2), "差")
levels(factor2)
factor2[[6]] <- "差"
factor2
factor2 <-
factor(c("好","好","普通","普通", "好"))
levels(factor2)
# 先擴大levels
levels(factor2) <- c(levels(factor2), "差")
levels(factor2)
factor2[[6]] <- "差"
factor2
levels(factor2)[[4]] <- "尚可"
factor2[[7]] <- "尚可"
factor2
# non factor
char1 <- c("小明","小美")
char2 <- c("大雄","技安")
c(char1, char2)
# factor
factor1 <- factor(c("好", "壞", "壞"))
factor2 <- factor(c("壞", "好", "好"))
c(factor1, factor2)
factor1[4:6] <- factor2
factor1
forcats::fct_c(factor1, factor2)
install.packages("forcats")
forcats::fct_c(factor1, factor2)
table(covid19$`確定病例數`)
